class Solution {
private:
   bool isEnoughHours(vector<int>& piles, int h ,int time){
       long long totalHours = 0;
       for(int i = 0 ; i < piles.size() ; i++){
           totalHours += ceil((double) piles[i] / time);
       }
       return totalHours <= h;
   }
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int n  = piles.size();
        int hi = *max_element(piles.begin(),piles.end());
        int lo = 1;
        // int ans = -1;

        while(lo <= hi){
            int mid = lo + (hi - lo)/2;
            if(isEnoughHours(piles,h,mid)){
            //   ans = mid;
              hi = mid - 1;
            }else{
                lo  = mid + 1;

            }
        }

        return lo;
    }
};
